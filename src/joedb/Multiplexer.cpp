#include "Multiplexer.h"

namespace joedb
{
 ////////////////////////////////////////////////////////////////////////////
 Multiplexer::Multiplexer
 ////////////////////////////////////////////////////////////////////////////
 (
  std::initializer_list<std::reference_wrapper<Writable>> initializer_list
 )
 {
  for (auto writable: initializer_list)
   add_writable(writable.get());
 }

 ////////////////////////////////////////////////////////////////////////////
 void Multiplexer::add_writable(Writable &writable)
 ////////////////////////////////////////////////////////////////////////////
 {
  writables.emplace_back(writable);
 }

 #define MULTIPLEX(x) do {for (auto w: writables) w.get().x;} while(0)

 ////////////////////////////////////////////////////////////////////////////
 void Multiplexer::create_table(const std::string &name)
 ////////////////////////////////////////////////////////////////////////////
 {
  MULTIPLEX(create_table(name));
 }

 ////////////////////////////////////////////////////////////////////////////
 void Multiplexer::drop_table(Table_Id table_id)
 ////////////////////////////////////////////////////////////////////////////
 {
  MULTIPLEX(drop_table(table_id));
 }

 ////////////////////////////////////////////////////////////////////////////
 void Multiplexer::rename_table
 ////////////////////////////////////////////////////////////////////////////
 (
  Table_Id table_id,
  const std::string &name
 )
 {
  MULTIPLEX(rename_table(table_id, name));
 }

 ////////////////////////////////////////////////////////////////////////////
 void Multiplexer::add_field
 ////////////////////////////////////////////////////////////////////////////
 (
  Table_Id table_id,
  const std::string &name,
  Type type
 )
 {
  MULTIPLEX(add_field(table_id, name, type));
 }

 ////////////////////////////////////////////////////////////////////////////
 void Multiplexer::drop_field
 ////////////////////////////////////////////////////////////////////////////
 (
  Table_Id table_id,
  Field_Id field_id
 )
 {
  MULTIPLEX(drop_field(table_id, field_id));
 }

 ////////////////////////////////////////////////////////////////////////////
 void Multiplexer::rename_field
 ////////////////////////////////////////////////////////////////////////////
 (
  Table_Id table_id,
  Field_Id field_id,
  const std::string &name
 )
 {
  MULTIPLEX(rename_field(table_id, field_id, name));
 }

 ////////////////////////////////////////////////////////////////////////////
 void Multiplexer::custom(const std::string &name)
 ////////////////////////////////////////////////////////////////////////////
 {
  MULTIPLEX(custom(name));
 }

 ////////////////////////////////////////////////////////////////////////////
 void Multiplexer::comment(const std::string &comment)
 ////////////////////////////////////////////////////////////////////////////
 {
  MULTIPLEX(comment(comment));
 }

 ////////////////////////////////////////////////////////////////////////////
 void Multiplexer::timestamp(int64_t timestamp)
 ////////////////////////////////////////////////////////////////////////////
 {
  MULTIPLEX(timestamp(timestamp));
 }

 ////////////////////////////////////////////////////////////////////////////
 void Multiplexer::valid_data()
 ////////////////////////////////////////////////////////////////////////////
 {
  MULTIPLEX(valid_data());
 }

 ////////////////////////////////////////////////////////////////////////////
 void Multiplexer::checkpoint(Commit_Level commit_level)
 ////////////////////////////////////////////////////////////////////////////
 {
  MULTIPLEX(checkpoint(commit_level));
 }

 ////////////////////////////////////////////////////////////////////////////
 void Multiplexer::insert_into
 ////////////////////////////////////////////////////////////////////////////
 (
  Table_Id table_id,
  Record_Id record_id
 )
 {
  MULTIPLEX(insert_into(table_id, record_id));
 }

 ////////////////////////////////////////////////////////////////////////////
 void Multiplexer::insert_vector
 ////////////////////////////////////////////////////////////////////////////
 (
  Table_Id table_id,
  Record_Id record_id,
  Record_Id size
 )
 {
  MULTIPLEX(insert_vector(table_id, record_id, size));
 }

 ////////////////////////////////////////////////////////////////////////////
 void Multiplexer::delete_from
 ////////////////////////////////////////////////////////////////////////////
 (
  Table_Id table_id,
  Record_Id record_id
 )
 {
  MULTIPLEX(delete_from(table_id, record_id));
 }

 #define TYPE_MACRO(type, return_type, type_id, R, W)\
 void Multiplexer::update_##type_id\
 (\
  Table_Id table_id,\
  Record_Id record_id,\
  Field_Id field_id,\
  return_type value\
 )\
 {\
  MULTIPLEX(update_##type_id(table_id, record_id, field_id, value));\
 }\
 void Multiplexer::update_vector_##type_id\
 (\
  Table_Id table_id,\
  Record_Id record_id,\
  Field_Id field_id,\
  Record_Id size,\
  const type *value\
 )\
 {\
  MULTIPLEX\
  (\
   update_vector_##type_id(table_id, record_id, field_id, size, value)\
  );\
 }\
 type *Multiplexer::get_own_##type_id##_storage\
 (\
  Table_Id table_id,\
  Record_Id record_id,\
  Field_Id field_id,\
  Record_Id &capacity\
 )\
 {\
  capacity = 0;\
  type *result = nullptr;\
  for (auto w: writables)\
  {\
   result = w.get().get_own_##type_id##_storage(table_id, record_id, field_id, capacity);\
   if (result)\
    break;\
  }\
  return result;\
 }
 #include "joedb/TYPE_MACRO.h"

 ////////////////////////////////////////////////////////////////////////////
 void Multiplexer::on_blob(Blob blob, Blob_Reader &reader)
 ////////////////////////////////////////////////////////////////////////////
 {
  MULTIPLEX(on_blob(blob, reader));
 }

 #undef MULTIPLEX

 ////////////////////////////////////////////////////////////////////////////
 bool Multiplexer::wants_blobs() const
 ////////////////////////////////////////////////////////////////////////////
 {
  for (auto w: writables)
  {
   if (w.get().wants_blobs())
    return true;
  }

  return false;
 }

 ////////////////////////////////////////////////////////////////////////////
 Blob Multiplexer::write_blob_data(const std::string &data)
 ////////////////////////////////////////////////////////////////////////////
 {
  Blob result;

  for (auto w: writables)
  {
   if (w.get().wants_blobs())
    result = w.get().write_blob_data(data);
  }

  return result;
 }

 ////////////////////////////////////////////////////////////////////////////
 Multiplexer::~Multiplexer() = default;
 ////////////////////////////////////////////////////////////////////////////
}
