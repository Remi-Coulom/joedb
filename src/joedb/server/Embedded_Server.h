#ifndef joedb_Embedded_Server_declared
#define joedb_Embedded_Server_declared

#include "joedb/server/Server.h"

#include <mutex>

namespace joedb
{
 ////////////////////////////////////////////////////////////////////////////
 class Embedded_Server: public Server
 ////////////////////////////////////////////////////////////////////////////
 {
  private:
   std::mutex mutex;
   Journal_File server_journal;

   //////////////////////////////////////////////////////////////////////////
   void lock() override
   //////////////////////////////////////////////////////////////////////////
   {
    mutex.lock();
   }

   //////////////////////////////////////////////////////////////////////////
   void unlock() override
   //////////////////////////////////////////////////////////////////////////
   {
    mutex.unlock();
   }

   //////////////////////////////////////////////////////////////////////////
   void pull(Journal_File &journal) const override
   //////////////////////////////////////////////////////////////////////////
   {
    if
    (
     journal.get_checkpoint_position() <
     server_journal.get_checkpoint_position()
    )
    {
     journal.append_raw_tail
     (
      server_journal.get_raw_tail
      (
       journal.get_checkpoint_position()
      )
     );
    }
   }

   //////////////////////////////////////////////////////////////////////////
   void push(Readonly_Journal &journal) override
   //////////////////////////////////////////////////////////////////////////
   {
    if
    (
     server_journal.get_checkpoint_position() <
     journal.get_checkpoint_position()
    )
    {
     server_journal.append_raw_tail
     (
      journal.get_raw_tail
      (
       server_journal.get_checkpoint_position()
      )
     );
    }
   }

  public:
   //////////////////////////////////////////////////////////////////////////
   Embedded_Server(Generic_File &file):
   //////////////////////////////////////////////////////////////////////////
    server_journal(file)
   {
   }
 };
}

#endif
