#include "joedb/journal/Interpreted_File.h"
#include "joedb/ui/Interpreter_Dump_Writable.h"

namespace joedb
{
 ////////////////////////////////////////////////////////////////////////////
 void Interpreted_File::read_data()
 ////////////////////////////////////////////////////////////////////////////
 {
  interpreter.main_loop(ios, null_stream);
  ios.clear();
  ios.seekp(0, std::ios::end);

  if (!interpreter.is_last_line_empty())
  {
   throw joedb::Exception
   (
    "Interpreted_File: last line of joedbi file must be empty"
   );
  }

  journal.soft_checkpoint();
 }

 ////////////////////////////////////////////////////////////////////////////
 Interpreted_File::Interpreted_File(const char *file_name, Open_Mode mode):
 ////////////////////////////////////////////////////////////////////////////
  Abstract_File(mode),
  file(file_name, mode),
  filebuf(file),
  ios(&filebuf),
  journal(memory_file),
  multiplexer{db, journal},
  interpreter(db, multiplexer, Record_Id::null),
  null_file(Open_Mode::create_new),
  null_filebuf(null_file),
  null_stream(&null_filebuf)
 {
  interpreter.set_echo(false);
  interpreter.set_rethrow(true);
  read_data();
 }

 ////////////////////////////////////////////////////////////////////////////
 void Interpreted_File::sync()
 ////////////////////////////////////////////////////////////////////////////
 {
  file.sync();
 }

 ////////////////////////////////////////////////////////////////////////////
 void Interpreted_File::shared_lock(int64_t start, int64_t size)
 ////////////////////////////////////////////////////////////////////////////
 {
  file.shared_lock(start, size);
  read_data();
 }

 ////////////////////////////////////////////////////////////////////////////
 void Interpreted_File::exclusive_lock(int64_t start, int64_t size)
 ////////////////////////////////////////////////////////////////////////////
 {
  file.exclusive_lock(start, size);
  read_data();
 }

 ////////////////////////////////////////////////////////////////////////////
 void Interpreted_File::unlock(int64_t start, int64_t size) noexcept
 ////////////////////////////////////////////////////////////////////////////
 {
  file.unlock(start, size);
 }

 ////////////////////////////////////////////////////////////////////////////
 void Interpreted_File::pwrite
 ////////////////////////////////////////////////////////////////////////////
 (
  const char *buffer,
  size_t size,
  int64_t offset
 )
 {
  memory_file.pwrite(buffer, size, offset);

  if (offset < Header::ssize && journal.pull())
  {
   Interpreter_Writable writable(ios, db);
   Multiplexer dump_multiplexer{writable, db};
   journal.play_until_checkpoint(dump_multiplexer);
   ios.flush();
  }
 }

 ////////////////////////////////////////////////////////////////////////////
 size_t Interpreted_File::pread
 ////////////////////////////////////////////////////////////////////////////
 (
  char *data,
  size_t size,
  int64_t offset
 ) const
 {
  return memory_file.pread(data, size, offset);
 }
}
