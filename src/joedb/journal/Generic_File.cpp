#include "joedb/journal/Generic_File.h"

#include <algorithm>

/////////////////////////////////////////////////////////////////////////////
void joedb::Generic_File::set_position(int64_t new_position)
/////////////////////////////////////////////////////////////////////////////
{
 if (new_position == get_position())
  return;

 flush();

 if (!seek(new_position))
 {
  position = new_position;
  reset_read_buffer();
 }
}

/////////////////////////////////////////////////////////////////////////////
void joedb::Generic_File::copy(Generic_File &file)
/////////////////////////////////////////////////////////////////////////////
{
 flush();
 file.flush();
 file.set_position(0);

 while (true)
 {
  file.read_buffer();
  if (file.read_buffer_size == 0)
   break;
  std::copy_n(file.buffer, file.read_buffer_size, buffer);
  write_buffer_index = file.read_buffer_size;
  write_buffer();
  position += file.read_buffer_size;
 }
}

/////////////////////////////////////////////////////////////////////////////
void joedb::Generic_File::write_string(const std::string &s)
/////////////////////////////////////////////////////////////////////////////
{
 compact_write<size_t>(s.size());
 for (char c: s)
  write<char>(c);
}

/////////////////////////////////////////////////////////////////////////////
std::string joedb::Generic_File::read_string()
/////////////////////////////////////////////////////////////////////////////
{
 std::string s;
 size_t size = compact_read<size_t>();
 s.resize(size);
 read_data(&s[0], size);
 return s;
}

/////////////////////////////////////////////////////////////////////////////
std::string joedb::Generic_File::safe_read_string(size_t max_size)
/////////////////////////////////////////////////////////////////////////////
{
 std::string s;
 size_t size = compact_read<size_t>();
 if (size < max_size)
 {
  s.resize(size);
  for (size_t i = 0; i < size; i++)
   s[i] = char(getc());
 }
 return s;
}

/////////////////////////////////////////////////////////////////////////////
void joedb::Generic_File::flush()
/////////////////////////////////////////////////////////////////////////////
{
 if (write_buffer_index)
  write_buffer();
}

/////////////////////////////////////////////////////////////////////////////
void joedb::Generic_File::commit()
/////////////////////////////////////////////////////////////////////////////
{
 flush();
 sync();
}
