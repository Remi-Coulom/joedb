#ifndef joedb_Memory_File_declared
#define joedb_Memory_File_declared

#include "joedb/journal/Generic_File.h"

#include <algorithm>

namespace joedb
{
 ////////////////////////////////////////////////////////////////////////////
 class Memory_File: public Generic_File
 ////////////////////////////////////////////////////////////////////////////
 {
  private:
   std::vector<char> data;
   size_t current;

   //////////////////////////////////////////////////////////////////////////
   int64_t get_size() const override
   //////////////////////////////////////////////////////////////////////////
   {
    return int64_t(data.size());
   }

   //////////////////////////////////////////////////////////////////////////
   size_t read_buffer() override
   //////////////////////////////////////////////////////////////////////////
   {
    size_t n = buffer_size;
    const size_t max = data.size() - current;
    if (n > max)
     n = max;
    std::copy_n(&data[current], n, buffer);
    current += n;
    return n;
   }

   //////////////////////////////////////////////////////////////////////////
   void write_buffer() override
   //////////////////////////////////////////////////////////////////////////
   {
    const size_t end = current + write_buffer_index;
    if (end > data.size())
     data.resize(end);

    std::copy_n(buffer, write_buffer_index, &data[current]);

    current += write_buffer_index;
   }

   //////////////////////////////////////////////////////////////////////////
   int seek(int64_t offset) override
   //////////////////////////////////////////////////////////////////////////
   {
    if (offset >= 0 && offset <= get_size())
    {
     current = size_t(offset);
     return 0;
    }
    else
     return 1;
   }

   //////////////////////////////////////////////////////////////////////////
   void sync() override
   //////////////////////////////////////////////////////////////////////////
   {
   }

  public:
   //////////////////////////////////////////////////////////////////////////
   Memory_File(Open_Mode mode = Open_Mode::create_new):
   //////////////////////////////////////////////////////////////////////////
    current(0)
   {
    this->mode = mode;
   }
 };
}

#endif
