#include "joedb/journal/Stream_File.h"
#include "joedb/Exception.h"

namespace joedb
{
 /////////////////////////////////////////////////////////////////////////////
 Input_Stream_File::Input_Stream_File(std::istream &stream):
 /////////////////////////////////////////////////////////////////////////////
  Generic_File(Open_Mode::read_existing),
  stream(stream)
 {
  if (!stream.good())
   throw Exception("!stream.good()");
 }

 /////////////////////////////////////////////////////////////////////////////
 int64_t Input_Stream_File::get_size() const
 /////////////////////////////////////////////////////////////////////////////
 {
  const std::streampos pos = stream.tellg();
  stream.seekg(0, std::ios_base::end);
  const std::streampos result = stream.tellg();
  stream.seekg(pos);
  return int64_t(result);
 }

 /////////////////////////////////////////////////////////////////////////////
 size_t Input_Stream_File::raw_read(char *buffer, size_t size)
 /////////////////////////////////////////////////////////////////////////////
 {
  stream.read(buffer, std::streamsize(size));
  return size_t(stream.gcount());
 }

 /////////////////////////////////////////////////////////////////////////////
 int Input_Stream_File::seek(int64_t offset)
 /////////////////////////////////////////////////////////////////////////////
 {
  stream.seekg(std::streampos(offset));

  int result = 0;
  if (!stream.good())
  {
   stream.clear();
   result = 1;
  }

  return result;
 }

 /////////////////////////////////////////////////////////////////////////////
 Stream_File::Stream_File(std::iostream &stream, Open_Mode mode):
 /////////////////////////////////////////////////////////////////////////////
  Generic_File(mode),
  stream(stream)
 {
  if (!stream.good())
   throw Exception("!stream.good()");
 }

 /////////////////////////////////////////////////////////////////////////////
 int64_t Stream_File::get_size() const
 /////////////////////////////////////////////////////////////////////////////
 {
  const std::streampos pos = stream.tellg();
  stream.seekg(0, std::ios_base::end);
  const std::streampos result = stream.tellg();
  stream.seekg(pos);
  return int64_t(result);
 }

 /////////////////////////////////////////////////////////////////////////////
 size_t Stream_File::raw_read(char *buffer, size_t size)
 /////////////////////////////////////////////////////////////////////////////
 {
  stream.read(buffer, std::streamsize(size));
  return size_t(stream.gcount());
 }

 /////////////////////////////////////////////////////////////////////////////
 void Stream_File::raw_write(const char *buffer, size_t size)
 /////////////////////////////////////////////////////////////////////////////
 {
  stream.write(buffer, std::streamsize(size));
  if (!stream.good())
   throw Exception("Error writing to stream");
 }

 /////////////////////////////////////////////////////////////////////////////
 int Stream_File::seek(int64_t offset)
 /////////////////////////////////////////////////////////////////////////////
 {
  stream.seekg(std::streampos(offset));
  stream.seekp(std::streampos(offset));

  int result = 0;
  if (!stream.good())
  {
   stream.clear();
   result = 1;
  }

  return result;
 }
}
