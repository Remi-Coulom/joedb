#ifndef joedb_Readonly_Memory_File_declared
#define joedb_Readonly_Memory_File_declared

#include "joedb/journal/Generic_File.h"

#include <algorithm>

namespace joedb
{
 ////////////////////////////////////////////////////////////////////////////
 class Readonly_Memory_File: public Generic_File
 ////////////////////////////////////////////////////////////////////////////
 {
  private:
   const char * const data;
   const size_t data_size;

   size_t current;

   //////////////////////////////////////////////////////////////////////////
   int64_t raw_get_size() const final
   //////////////////////////////////////////////////////////////////////////
   {
    return int64_t(data_size);
   }

   //////////////////////////////////////////////////////////////////////////
   size_t raw_read(char *buffer, size_t size) final
   //////////////////////////////////////////////////////////////////////////
   {
    const size_t max_size = data_size - current;
    const size_t n = std::min(size, max_size);
    std::copy_n(&data[current], n, buffer);
    current += n;
    return n;
   }

   //////////////////////////////////////////////////////////////////////////
   void raw_write(const char *buffer, size_t size) final
   //////////////////////////////////////////////////////////////////////////
   {
   }

   //////////////////////////////////////////////////////////////////////////
   void raw_seek(int64_t offset) final
   //////////////////////////////////////////////////////////////////////////
   {
    if (offset >= 0 && offset <= get_size())
     current = size_t(offset);
    else
     throw Exception("seek out of range");
   }

  public:
   //////////////////////////////////////////////////////////////////////////
   Readonly_Memory_File(const void *memory, size_t size):
   //////////////////////////////////////////////////////////////////////////
    Generic_File(joedb::Open_Mode::read_existing),
    data((const char *)memory),
    data_size(size),
    current(0)
   {
   }

   //////////////////////////////////////////////////////////////////////////
   Readonly_Memory_File(const std::string &s):
   //////////////////////////////////////////////////////////////////////////
    Readonly_Memory_File(&s[0], s.size())
   {
   }
 };
}

#endif
