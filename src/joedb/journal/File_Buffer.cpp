#include "joedb/journal/File_Buffer.h"
#include "joedb/error/Destructor_Logger.h"

namespace joedb
{
 //////////////////////////////////////////////////////////////////////////
 File_Buffer::File_Buffer(Abstract_File &file):
 //////////////////////////////////////////////////////////////////////////
  File_Iterator(file)
 {
  read_buffer_size = 0;
  buffer.index = 0;
 }

 ////////////////////////////////////////////////////////////////////////////
 void File_Buffer::flush()
 ////////////////////////////////////////////////////////////////////////////
 {
  if (buffer_has_write_data())
   write_buffer();
  else
  {
   File_Iterator::seek(get_position());
   read_buffer_size = 0;
  }
  buffer.index = 0;
 }

 ////////////////////////////////////////////////////////////////////////////
 void File_Buffer::set_position(int64_t new_position)
 ////////////////////////////////////////////////////////////////////////////
 {
  flush();
  File_Iterator::seek(new_position);
 }

 ////////////////////////////////////////////////////////////////////////////
 void File_Buffer::write_string(const std::string &s)
 ////////////////////////////////////////////////////////////////////////////
 {
  compact_write<size_t>(s.size());
  write_data(s.data(), s.size());
 }

 ////////////////////////////////////////////////////////////////////////////
 std::string File_Buffer::read_string()
 ////////////////////////////////////////////////////////////////////////////
 {
  const size_t size = compact_read<size_t>();
  std::string s(size, 0);
  read_data(s.data(), size);
  return s;
 }

 ////////////////////////////////////////////////////////////////////////////
 std::string File_Buffer::safe_read_string(int64_t max_size)
 ////////////////////////////////////////////////////////////////////////////
 {
  std::string s;
  const int64_t size = compact_read<int64_t>();
  if (size > 0 && size < max_size)
  {
   s.resize(size_t(size));
   read_data(s.data(), size_t(size));
  }
  return s;
 }

 ////////////////////////////////////////////////////////////////////////////
 File_Buffer::~File_Buffer()
 ////////////////////////////////////////////////////////////////////////////
 {
  if (buffer_has_write_data())
  {
   Destructor_Logger::warning("flushing File_Buffer");
   try { write_buffer(); } catch (...) {}
  }
 }
}
