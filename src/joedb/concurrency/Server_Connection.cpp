#include "joedb/concurrency/Server_Connection.h"
#include "joedb/Exception.h"

#include <iostream>
#include <experimental/buffer>

namespace joedb
{
 ////////////////////////////////////////////////////////////////////////////
 int64_t Server_Connection::pull(Writable_Journal &client_journal)
 ////////////////////////////////////////////////////////////////////////////
 {
  return 0;
 }

 ////////////////////////////////////////////////////////////////////////////
 int64_t Server_Connection::lock_pull(Writable_Journal &client_journal)
 ////////////////////////////////////////////////////////////////////////////
 {
  return 0;
 }

 ////////////////////////////////////////////////////////////////////////////
 void Server_Connection::push_unlock
 ////////////////////////////////////////////////////////////////////////////
 (
  Readonly_Journal &client_journal,
  int64_t server_position
 )
 {
 }

 ////////////////////////////////////////////////////////////////////////////
 void Server_Connection::lock()
 ////////////////////////////////////////////////////////////////////////////
 {
 }

 ////////////////////////////////////////////////////////////////////////////
 void Server_Connection::unlock()
 ////////////////////////////////////////////////////////////////////////////
 {
 }

 ////////////////////////////////////////////////////////////////////////////
 Server_Connection::Server_Connection
 ////////////////////////////////////////////////////////////////////////////
 (
  const char *host_name,
  const char *port_name
 ):
  socket(io_context)
 {
  std::cerr << "Connecting... ";

  net::ip::tcp::resolver resolver(io_context);
  net::connect
  (
   socket,
   resolver.resolve(host_name, port_name)
  );

  std::cerr << "Waiting for \"joedb\"... ";

  {
   char buffer[5];
   net::read(socket, net::buffer(buffer, sizeof(buffer)));

   if
   (
    buffer[0] != 'j' ||
    buffer[1] != 'o' ||
    buffer[2] != 'e' ||
    buffer[3] != 'd' ||
    buffer[4] != 'b'
   )
   {
    throw Exception("bad reply from server");
   }
  }

  std::cerr << "OK.\n";
 }
}
