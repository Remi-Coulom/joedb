Vectors
=======

Vector Table Storage
--------------------

The joedb compiler currently offers two options for storing a table:

- ``freedom_keeper`` is the default. It stores tables in a vector of structs, with a boolean flag indicating whether each row is free or not. In addition, two linked lists of free and occupied rows are maintained.
- ``vector`` also stores the table in a vector, but does not allow holes. There is no need to keep track of which row is free or not: all the rows are used. When using the ``vector`` storage option, it is not possible to delete anything in the table. The ``vector`` storage option is less flexible, but has better speed and memory usage.

It is possible to set the storage option of the table in the joedbc file with this syntax:

.. code-block:: none

  set_table_storage <table_name> <storage>

Allocating and Using Vectors
----------------------------

Code generated by the joedb compiler offers convenient functions to allocate a set of consecutive rows, and access them like a vector. Such functions are always available, whether the table storage is set to ``freedom_keeper`` or to ``vector``.

For instance, when using a database defined by this schema:

.. code-block:: none

    create_table float
    add_field float value float32

It is possible to allocate and manipulate a vector of floats like this:

.. code-block:: c++

     const size_t n = 5;
     auto v = db.new_vector_of_float(n);
     for (size_t i = 0; i < n; i++)
      db.set_value(v[i], 0.1f * float(i));

``v`` is a usual reference, and can be stored in a field of type ``references float``.
