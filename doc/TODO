1: make something work fast:
 - simple interactive interpreter
 - write binary log (store version number)
 - load binary log (with schema-only option)
 - compiler to vector cache (with boolean "deleted" flag)

2: make it good:
 - unit testing (gtest, cmake integration)
 - documentation
 - New features: transactions, trigger, index, referential integrity, ...
 - cache:
   - any stl container (vector, deque, map, unordered_map)
   - none (write only, for visit log)), or only N most recent
   - file (maybe, for really huge tables)

Keywords:
 - transparent persistence

References:

 Object-Relational Mapping (ORM)
 - http://www.codesynthesis.com/products/odb/
 - http://www.webtoolkit.eu/wt/doc/tutorial/dbo/tutorial.html
 - http://sourceforge.net/projects/litesql/

 Serialization
 - http://www.boost.org/doc/libs/1_56_0/libs/serialization/doc/index.html

 C++ queries
 - http://www.drdobbs.com/cpp/linq-like-list-manipulation-in-c/240166882
