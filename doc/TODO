 - Before transparent persistence in C++: make a command interpreter (SQL)
   - Data definition: add/remove table/field
   - Data modification: insert,update,delete
   - Dump (binary or sql), including data-structure-only dump
   - Data structure will be defined by the data definition
   - Keep all data in memory in an "interpreted" data structure
 - Generate C++ code from that data structure -> produce binary journal
 - Load data from journal
 - Write/Read dump

Ideas:
 - Binary file format
 - Log all operations
 - Store schema and crazydb version into journal
 - Should be flexible to change of schema
 - Compile options:
   - main index type (uint16_t, uint32_t, uint64_t), for each table
   - additional index on other fields
   - cache type for each table: vector, deque, map, none
   - back-end: sql or crazydb
   - when "none" and crazydb backend: write only (append)
     Good for writing a big visit log, for instance

Keywords:
 - transparent persistence

References:
 - http://www.drdobbs.com/cpp/linq-like-list-manipulation-in-c/240166882
 - http://www.codesynthesis.com/products/odb/
 - http://www.webtoolkit.eu/wt/doc/tutorial/dbo/tutorial.html
